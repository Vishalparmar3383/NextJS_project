generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model book_tran {
  tran_id           Int                 @id @default(autoincrement())
  book_id           Int?
  status            book_tran_status?   @default(available)
  user_id           Int?
  record_status     record_status?      @default(active)
  books             books?              @relation(fields: [book_id], references: [book_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_ibfk_1")
  users             users?              @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_ibfk_2")
  book_tran_history book_tran_history[]
  notifications     notifications[]

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model book_tran_history {
  id                                          Int                      @id @default(autoincrement())
  book_id                                     Int?
  tran_id                                     Int?
  status                                      book_tran_history_status @default(pending)
  requested_by                                Int?
  approved_by                                 Int?
  requested_at                                DateTime?                @default(now()) @db.DateTime(0)
  approved_at                                 DateTime?                @db.DateTime(0)
  date_issued                                 DateTime?                @db.Date
  date_due                                    DateTime?                @db.Date
  date_returned                               DateTime?                @db.Date
  remarks                                     String?                  @db.Text
  books                                       books?                   @relation(fields: [book_id], references: [book_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_history_ibfk_1")
  book_tran                                   book_tran?               @relation(fields: [tran_id], references: [tran_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_history_ibfk_2")
  users_book_tran_history_requested_byTousers users?                   @relation("book_tran_history_requested_byTousers", fields: [requested_by], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_history_ibfk_4")
  users_book_tran_history_approved_byTousers  users?                   @relation("book_tran_history_approved_byTousers", fields: [approved_by], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "book_tran_history_ibfk_5")
  fines                                       fines[]

  @@index([approved_by], map: "approved_by")
  @@index([book_id], map: "book_id")
  @@index([requested_by], map: "requested_by")
  @@index([tran_id], map: "tran_id")
}

model books {
  book_id           Int                 @id @default(autoincrement())
  title             String?             @db.VarChar(255)
  author            String              @db.VarChar(255)
  isbn              String?             @db.VarChar(20)
  year              Int?                @db.Year
  genre             String?             @db.VarChar(100)
  image_url         String?             @db.Text
  description       String?             @db.Text
  librarian_id      Int?
  created_at        DateTime?           @default(now()) @db.DateTime(0)
  updated_at        DateTime?           @default(now()) @db.DateTime(0)
  record_status     record_status?      @default(active)
  book_tran         book_tran[]
  book_tran_history book_tran_history[]
  notifications     notifications[]
  user_wishlist     user_wishlist[]
}

model fines {
  fine_id              Int                @id @default(autoincrement())
  user_id              Int?
  book_tran_history_id Int?
  amount               Decimal?           @db.Decimal(10, 2)
  reason               String?            @db.Text
  status               fines_status?      @default(unpaid)
  created_at           DateTime?          @default(now()) @db.DateTime(0)
  paid_at              DateTime?          @db.DateTime(0)
  users                users?             @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "fines_ibfk_1")
  book_tran_history    book_tran_history? @relation(fields: [book_tran_history_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fines_ibfk_2")

  @@index([book_tran_history_id], map: "book_tran_history_id")
  @@index([user_id], map: "user_id")
}

model logs {
  log_id      Int       @id @default(autoincrement())
  description String    @db.Text
  user_id     Int
  created_at  DateTime? @default(now()) @db.DateTime(0)
  users       users     @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "logs_ibfk_1")

  @@index([user_id], map: "user_id")
}

model notifications {
  notification_id                         Int                   @id @default(autoincrement())
  type                                    notifications_type?
  book_id                                 Int?
  from_user_id                            Int?
  to_user_id                              Int?
  tran_id                                 Int?
  status                                  notifications_status? @default(pending)
  message                                 String?               @db.Text
  created_at                              DateTime?             @default(now()) @db.DateTime(0)
  resolved_at                             DateTime?             @db.DateTime(0)
  books                                   books?                @relation(fields: [book_id], references: [book_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_1")
  users_notifications_from_user_idTousers users?                @relation("notifications_from_user_idTousers", fields: [from_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_2")
  users_notifications_to_user_idTousers   users?                @relation("notifications_to_user_idTousers", fields: [to_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_3")
  book_tran                               book_tran?            @relation(fields: [tran_id], references: [tran_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_4")

  @@index([book_id], map: "book_id")
  @@index([from_user_id], map: "from_user_id")
  @@index([to_user_id], map: "to_user_id")
  @@index([tran_id], map: "tran_id")
}

model user_wishlist {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  book_id    Int?
  created_at DateTime? @default(now()) @db.DateTime(0)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "user_wishlist_ibfk_1")
  books      books?    @relation(fields: [book_id], references: [book_id], onDelete: Restrict, onUpdate: Restrict, map: "user_wishlist_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id                            Int           @id @default(autoincrement())
  name                               String?       @db.VarChar(100)
  email                              String?       @unique(map: "email") @db.VarChar(100)
  password_hash                      String?       @db.VarChar(255)
  role                               users_role?   @default(patron)
  status                             users_status? @default(active)
  created_at                         DateTime?     @default(now()) @db.DateTime(0)
  updated_at                         DateTime?     @default(now()) @db.DateTime(0)
  gender                             gender?       @default(male)
  phone_number                       String?       @db.VarChar(20)
  birth_date                         DateTime?     @db.DateTime(0)
  address                            String?       @db.VarChar(255)
  profile_image_url                  String?       @db.VarChar(255)
  book_tran                          book_tran[]
  book_tran_history_book_tran_history_requested_byTousers book_tran_history[] @relation("book_tran_history_requested_byTousers")
  book_tran_history_book_tran_history_approved_byTousers  book_tran_history[] @relation("book_tran_history_approved_byTousers")
  fines                              fines[]
  logs                               logs[]
  notifications_notifications_from_user_idTousers         notifications[]     @relation("notifications_from_user_idTousers")
  notifications_notifications_to_user_idTousers           notifications[]     @relation("notifications_to_user_idTousers")
  user_wishlist                      user_wishlist[]
}


model contact_us {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(100)
  email      String?   @db.VarChar(255)
  subject    String?   @db.VarChar(255)
  message    String?   @db.Text
  created_at DateTime? @default(now()) @db.DateTime(0)
}

enum record_status {
  active
  inactive
}

enum notifications_type {
  issue
  return
}

enum book_tran_status {
  available
  not_available @map("not available")
}

enum book_tran_history_status {
  issued
  returned
  pending
  rejected
}

enum users_role {
  patron
  librarian
  admin
}

enum fines_status {
  unpaid
  paid
}

enum users_status {
  active
  banned
}

enum notifications_status {
  pending
  approved
  rejected
}

enum gender {
  male
  female
  other
}